struct HudComponentBase {
	id: #[id] string,

	/// Whether this component should be added to the HUD for a new player
	addByDefault?: boolean,

	/// The coulmn index this component is added to if there is space and 
	/// `addByDefault` is true. If there is no space, it will be added to a
	/// different coulmn instead. If there is no space in no coulmn, it will not
	/// be added by default.
	preferredColumn?: int,

	name: #[text_component] string,

	/// This should be a unicode character matching a space from the
	/// `fetchr:space` font.
	iconWidth?: #[text_component] string,

	/// Text to display between the icon and the value when the component is
	// left-aligned.
	iconSeparatorAlignLeft?: #[text_component] string,

	/// Text to display between the icon and the value when the component is
	// right-aligned.
	iconSeparatorAlignRight?: #[text_component] string,

	/// The font definition of the icon. This should be a text component with an
	/// empty text and a font.
	///
	/// Each entry corresponds to a different line with the correct vertical
	/// offset
	iconFont?: [ #[text_component] string ] @ 11,

	/// The item that is displayed. Empty if the item is set at runtime or the
	/// component does not have an icon 
	icon?: #[text_component] string,
}

struct HudComponent {
	...HudComponentBase,

	slot_id: byte,

	/// The text component to show for custom settings.
	settingsTextComponent?: #[text_component] string,
}



struct PlayerHudComponent {
	...HudComponent,

	slot_id: byte,
	changed?: boolean,
	padding?: #[text_component] string,
	evaluated?: #[text_component] string,
}